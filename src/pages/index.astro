---
import Layout from '../layouts/Layout.astro';
import Container from '../layouts/Container.astro';
import Button from '../components/Button.astro';
---

<Layout title="Alpinejs Examples">
    <div class="flex flex-col items-center w-full">
        <Container>
            <h1 x-data="{ message: 'I ❤️ Alpine' }" x-text="message"></h1>
        </Container>

        <Container>
            <div x-data="{ open: false }" class="flex items-center gap-2">
                <Button @click="open = !open">Expand</Button>
                <div class="w-20">
                    <div
                        x-show="open"
                        x-transition:enter="transition ease-out duration-300"
                        x-transition:enter-start="opacity-0 transform scale-90"
                        x-transition:enter-end="opacity-100 transform scale-100"
                        x-transition:leave="transition ease-in duration-300"
                        x-transition:leave-start="opacity-100 transform scale-100"
                        x-transition:leave-end="opacity-0 transform scale-90"
                    >
                        Hello 👋
                    </div>
                </div>
            </div>
        </Container>

        <Container>
            <div x-data="{ count: 0 }" class="flex items-center gap-3">
                <Button x-on:click="count++">Increment</Button>

                <span x-text="count"></span>
            </div>
        </Container>

        <Container>
            <div x-data="{ open: false }" class="flex flex-col">
                <Button @click="open = ! open">Toggle</Button>

                <div class="relative"><div x-cloak x-show="open" x-transition.scale.80.origin.top @click.outside="open = false" class="absolute flex flex-col p-5 bg-white bg-opacity-50 border rounded">Contents...</div></div>
            </div>
        </Container>

        <Container>
            <div x-data={`{
                open: false,
                get isOpen() { return this.open },
                toggle() { this.open = ! this.open },
             }`}>
                <Button @click="toggle()">Toggle with methods</Button>

                <div class="relative"><div x-cloak x-show="isOpen" @click.outside="open = false" class="absolute flex flex-col p-5 bg-white bg-opacity-50 border rounded">Contents...</div></div>
            </div>
        </Container>

        <Container>
            <div x-data="dropdown">
                <Button @click="toggle">Reusable Toggle Content</Button>
                <div class="relative"><div x-cloak x-show="open" @click.outside="open = false" class="absolute flex flex-col p-5 bg-white bg-opacity-50 border rounded">Contents...</div></div>
            </div>
        </Container>

        <Container>
            <div x-data="dropdown(true)">
                <Button @click="toggle">Default open</Button>
                <div class="relative"><div x-cloak x-show="open" @click.outside="open = false" class="absolute flex flex-col p-5 bg-white bg-opacity-50 border rounded">Contents...</div></div>
            </div>
        </Container>

        <Container>
            <div x-data="dropdown">
                <Button x-bind="trigger">Toggle with bind</Button>
                <div class="relative"><div x-cloak x-bind="dialogue" class="absolute flex flex-col p-5 bg-white bg-opacity-50 border rounded">Contents...</div></div>
            </div>
        </Container>

        <Container>
            <div
                x-data={`{
                    search: '',
                    items: ['foo', 'bar', 'baz'],
                    get filteredItems() {
                        return this.items.filter(
                            i => i.startsWith(this.search)
                        )
                    }
                }`}
            >
                <input x-model="search" placeholder="Search..." class="px-4 py-2 border rounded select-none focus:outline-none focus:ring focus:ring-indigo-300">
                <ul>
                    <template x-for="item in filteredItems" :key="item">
                        <li x-text="item" class="p-0.5"></li>
                    </template>
                </ul>
            </div>
        </Container>

        <Container>
            <div x-data="{ foo: 'bar' }" class="px-4 py-2 border rounded">
                <span x-text="`foo: ${foo}`"><!-- Will output: "bar" --></span>

                <div x-data="{ bar: 'baz' }" class="px-4 py-2 border rounded">
                    <span x-text="`foo: ${foo}`"><!-- Will output: "bar" --></span>

                    <div x-data="{ foo: 'bob' }" class="px-4 py-2 border rounded">
                        <span x-text="`foo: ${foo}`"><!-- Will output: "bob" --></span>
                    </div>
                </div>
            </div>
        </Container>

        <Container>
            <Button x-data="{ open: true }" @click="open = false" x-show="open">
                Hide Me
            </Button>
        </Container>

        <Container x-data>
            <Button  @click="$store.darkMode.toggle()" x-text="`Toggle DarkMode: ${$store.darkMode.on}`"></Button>
            <a href="javascript:window.toggleDarkMode()" class="underline">regular javascript</a>

            <div class="px-6 py-8 mt-2 bg-white rounded-lg shadow-xl ring-1 ring-slate-900/5" :class="{'bg-slate-800' : $store.darkMode.on, 'bg-white': !$store.darkMode.on}">
              <div>
                <span class="inline-flex items-center justify-center p-2 bg-indigo-500 rounded-md shadow-lg">
                    <svg class="w-6 h-6 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                    </svg>
                </span>
              </div>
              <h3 class="mt-5 text-base font-medium tracking-tight " :class="$store.darkMode.on ? 'text-white' : 'text-slate-900'">Writes Upside-Down</h3>
              <p class="mt-2 text-sm text-slate-500" :class="$store.darkMode.on ? 'text-slate-400' : 'text-slate-500'">
                The Zero Gravity Pen can be used to write in any orientation, including upside-down. It even works in outer space.
              </p>
            </div>
        </Container>

        <Container>
            <div class="flex items-center gap-2" x-data="{counter:0}">
                <div x-text="counter" class="mr-2 text-3xl"></div>
                <Button x-bind="SomeButton({incr: -1})"></Button>
                <Button x-bind="SomeButton"></Button>
            </div>
        </Container>

        <Container>
            <div x-data>
                <span x-uppercase>Hello World!</span>
            </div>
        </Container>

        <Container>
            <div x-data="{ message: 'Hello World!' }">
                <div x-text="message"></div>
                <div x-log="message"></div>

                <Button @click="message = 'yolo'">Change</Button>
            </div>
        </Container>

        <Container>
            <div x-data="{other: 'hello', message: 'world'}" x-message="mess">
                <div x-text="other"></div>
                <div x-text="message"></div>
                <div x-log="message"></div>

                <Button @click="message = 'yolo'">Change</Button>
            </div>
        </Container>

        <Container>
            <span x-data x-text="$now"></span>
        </Container>

        <Container>
            <Button x-data @click="$clipboard('hello world')">Copy "Hello World"</Button>
        </Container>

        <Container>
            <div
                x-data="{ users: null }"
                x-init="$nextTick( async () => users = await (await fetch('/users.json')).json() )"
            >
                <div x-show="!users">Loading...</div>
                <ul class="flex flex-wrap">
                    <template x-for="user in users" :key="user.id">
                        <li class="p-0.5">
                            <div class="
                                rounded-lg
                                border
                                border-[#FFFFFF70]
                                drop-shadow
                                overflow-hidden
                                w-20
                            "
                            >
                                <img class="aspect-[1/1]" :src="user.picture" />
                                <span class="text-xs" x-text="user.name"></span>
                            </div>
                        </li>
                    </template>
                </ul>

            </div>
        </Container>

        <Container x-data>
            <div class="flex items-center gap-3">
                <Button @click="$refs.text.remove()">Remove Text</Button>
                <span x-ref="text">Hello 👋</span>
            </div>
        </Container>

        <Container x-data>
            <div x-data="{ openx: false }">
                <Button @click="openx = ! openx">Toggle Modal</Button>

                <template x-teleport="body">
                    <dialog :open="openx" x-show="openx" x-trap.noscroll="openx" class="fixed z-50 flex flex-col w-full h-full bg-opacity-50 bg-slate-700">
                        <div class="max-w-md p-5 m-auto bg-white" @click.outside="openx = false">
                            Modal contents...
                        </div>
                    </dialog>
                </template>
            </div>
        </Container>
    </div>
</Layout>

<script>
    import Alpine from 'https://esm.sh/alpinejs@3.13.0'

    import plugins from '/plugins.js?url'
    Alpine.plugin(plugins)

    import focus from 'https://esm.sh/@alpinejs/focus@3.13.1'

    Alpine.plugin(focus)

    window.toggleDarkMode = () => {
        Alpine.store('darkMode').toggle()
    }

    Alpine.start()
</script>
